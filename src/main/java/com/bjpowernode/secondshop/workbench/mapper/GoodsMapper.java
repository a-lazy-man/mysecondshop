package com.bjpowernode.secondshop.workbench.mapper;

import com.bjpowernode.secondshop.workbench.domain.Goods;
import com.bjpowernode.secondshop.workbench.domain.GoodsOrder;
import org.apache.ibatis.annotations.Param;

import java.util.List;
import java.util.Map;

public interface GoodsMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table goods
     *
     * @mbggenerated Tue Jan 24 15:51:59 CST 2023
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table goods
     *
     * @mbggenerated Tue Jan 24 15:51:59 CST 2023
     */
    int insert(Goods record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table goods
     *
     * @mbggenerated Tue Jan 24 15:51:59 CST 2023
     */
    int insertSelective(Goods record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table goods
     *
     * @mbggenerated Tue Jan 24 15:51:59 CST 2023
     */
    Goods selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table goods
     *
     * @mbggenerated Tue Jan 24 15:51:59 CST 2023
     */
    int updateByPrimaryKeySelective(Goods record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table goods
     *
     * @mbggenerated Tue Jan 24 15:51:59 CST 2023
     */
    int updateByPrimaryKey(Goods record);

    /**
     * 查询出所有的商品
     * @return
     */
    List<Goods> selectAllGoods();

    /**
     * 查询出最新发布的5个商品
     * @return
     */
    List<Goods> selectGoodsByUploadTimeForFive();

    /**
     * 用户发布商品，向后台goods表插入一条数据
     * @param goods
     * @return
     */
    int insertGoodsByCondition(Goods goods);

    /**
     * 查询goods表中有多少条记录
     * @return
     */
    int selectGoodsNum();

    /**
     * 修改商品的图片
     * @param map
     * @return
     */
    int updatePhotoUrlByGoodsId(Map<String, Object>map);

    /**
     * 根据商品id查询商品的详细信息
     * @param goodsId
     * @return
     */
    Goods selectGoodsByGoodsId(int goodsId);

    /**
     * 根据该商品的一级类型查询出该商品相关的商品
     * @param secondTypeId
     * @return
     */
    List<Goods> selectRelatedGoodsBySecondTypeId(int secondTypeId);

    /**
     * 查询出该卖家的发布的所有的商品
     * @param userId
     * @return
     */
    List<Goods> selectGoodsByUserId(String userId);

    /**
     * 查询出所有的该用户收藏的的所有的商品
     * @param goodsIds
     * @return
     */
    List<Goods> selectCollectGoodsByGoodsIds(@Param("goodsIds") Integer[] goodsIds);

    /**
     * 根据二级商品类型id查询出该类型的所有商品
     * @param secondTypeId
     * @return
     */
    List<Goods> selectGoodsBySecondTypeId(int secondTypeId);

    /**
     * 分页查询
     * @param map
     * @return
     */
    List<Goods> pageSelectByConditions(Map<String,Object>map);

    /**
     * 分页查询 查询满足条件的记录条数
     * @param map
     * @return
     */
    int pageSelectCountsByConditions(Map<String,Object>map);

    /**
     * 根据商品id查询用户的id
     * @param goodsId
     * @return
     */
    String selectUserIdByGoodsId(int goodsId);

    /**
     * 修改信息
     * @param goods
     * @return
     */
    int updateGoods(Goods goods);

    /**
     * 查询所有的物品
     * @return
     */
    List<Goods> selectAllGoodsForAdmin();

    /**
     * 下架商品
     * @param goodsId
     * @return
     */
    int updateGoodsStatus(Integer goodsId);

    /**
     * 删除该商品
     * @param goodsId
     * @return
     */
    int deleteGoodsById(Integer goodsId);

}